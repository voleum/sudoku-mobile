import React from 'react';
import {
  View,
  Text,
  StyleSheet,
} from 'react-native';
import { DifficultyLevel } from '../../../domain/types/GameTypes';
import { Colors } from '../../styles/colors';
import { Typography } from '../../styles/typography';
import { Spacing, BorderRadius } from '../../styles/spacing';
import { Card } from '../common/Card';

interface DifficultyStats {
  difficulty: DifficultyLevel;
  gamesPlayed: number;
  gamesCompleted: number;
  completionRate: number;      // %
  averageTime: number;         // —Å–µ–∫—É–Ω–¥—ã
  bestTime: number;           // —Å–µ–∫—É–Ω–¥—ã
  totalTime: number;          // —Å–µ–∫—É–Ω–¥—ã
  averageHints: number;
  averageErrors: number;
  currentStreak: number;      // –ø–æ–¥—Ä—è–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
  longestStreak: number;
}

interface DifficultyCardProps {
  difficulty: DifficultyLevel;
  stats?: DifficultyStats;
  recommended?: boolean;
  onPress: (difficulty: DifficultyLevel) => void;
}

// –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Ä–æ–≤–Ω—è—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É
const difficultyMeta = {
  beginner: {
    name: '–ù–û–í–ò–ß–û–ö',
    emoji: 'üü¢',
    clues: '36-40 –ø–æ–¥—Å–∫–∞–∑–æ–∫',
    time: '10-20 –º–∏–Ω',
    description: '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –ò–∑—É—á–∞–µ–º –æ—Å–Ω–æ–≤—ã',
  },
  easy: {
    name: '–õ–ï–ì–ö–ò–ô',
    emoji: 'üü°',
    clues: '32-35 –ø–æ–¥—Å–∫–∞–∑–æ–∫',
    time: '15-30 –º–∏–Ω',
    description: '‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ –ü—Ä–∞–∫—Ç–∏–∫—É–µ–º —Ç–µ—Ö–Ω–∏–∫–∏',
  },
  medium: {
    name: '–°–†–ï–î–ù–ò–ô',
    emoji: 'üü†',
    clues: '28-31 –ø–æ–¥—Å–∫–∞–∑–∫–∞',
    time: '25-45 –º–∏–Ω',
    description: '‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ –†–∞–∑–≤–∏–≤–∞–µ–º –Ω–∞–≤—ã–∫–∏',
  },
  hard: {
    name: '–°–õ–û–ñ–ù–´–ô',
    emoji: 'üî¥',
    clues: '24-27 –ø–æ–¥—Å–∫–∞–∑–æ–∫',
    time: '40-80 –º–∏–Ω',
    description: '‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
  },
  expert: {
    name: '–≠–ö–°–ü–ï–†–¢–ù–´–ô',
    emoji: '‚ö´',
    clues: '20-23 –ø–æ–¥—Å–∫–∞–∑–∫–∏',
    time: '60+ –º–∏–Ω',
    description: '‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤',
  },
};

export const DifficultyCard: React.FC<DifficultyCardProps> = ({
  difficulty,
  stats,
  recommended = false,
  onPress,
}) => {
  const meta = difficultyMeta[difficulty];
  const difficultyColor = Colors.difficulty[difficulty];

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–µ–∫—É–Ω–¥ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const cardStyle = StyleSheet.flatten([styles.card, ...(recommended ? [styles.recommendedCard] : [])]);

  return (
    <Card
      pressable
      onPress={() => onPress(difficulty)}
      style={cardStyle}
      testID={`difficulty-card-${difficulty}`}
    >
      <View style={styles.header}>
        <View style={styles.titleRow}>
          <Text style={styles.emoji}>{meta.emoji}</Text>
          <Text style={[styles.title, { color: difficultyColor }]}>
            {meta.name}
          </Text>
          {recommended && (
            <View style={styles.recommendedBadge}>
              <Text style={styles.recommendedText}>–†–ï–ö–û–ú–ï–ù–î–£–ï–ú</Text>
            </View>
          )}
        </View>

        <View style={styles.infoRow}>
          <Text style={styles.clues}>{meta.clues}</Text>
          <Text style={styles.separator}>‚Ä¢</Text>
          <Text style={styles.time}>{meta.time}</Text>
        </View>

        <Text style={styles.description}>{meta.description}</Text>
      </View>

      {stats && (
        <View style={styles.stats}>
          <View style={styles.statItem}>
            <Text style={styles.statLabel}>–õ—É—á—à–µ–µ –≤—Ä–µ–º—è</Text>
            <Text style={styles.statValue}>
              {stats.bestTime ? formatTime(stats.bestTime) : '‚Äî'}
            </Text>
          </View>

          <View style={styles.statItem}>
            <Text style={styles.statLabel}>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥</Text>
            <Text style={styles.statValue}>
              {stats.completionRate ? `${Math.round(stats.completionRate)}%` : '‚Äî'}
            </Text>
          </View>

          <View style={styles.statItem}>
            <Text style={styles.statLabel}>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ</Text>
            <Text style={styles.statValue}>
              {stats.gamesPlayed}
            </Text>
          </View>
        </View>
      )}
    </Card>
  );
};

const styles = StyleSheet.create({
  card: {
    marginHorizontal: Spacing.screen,
    marginVertical: Spacing.sm,
  },

  recommendedCard: {
    borderWidth: 2,
    borderColor: Colors.primary,
  },

  header: {
    marginBottom: Spacing.md,
  },

  titleRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: Spacing.sm,
  },

  emoji: {
    fontSize: Typography.fontSize.xl,
    marginRight: Spacing.sm,
  },

  title: {
    ...Typography.heading4,
    flex: 1,
  },

  recommendedBadge: {
    backgroundColor: Colors.primary,
    borderRadius: BorderRadius.sm,
    paddingHorizontal: Spacing.sm,
    paddingVertical: Spacing.xs,
  },

  recommendedText: {
    ...Typography.caption,
    color: Colors.white,
    fontWeight: Typography.fontWeight.bold,
  },

  infoRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: Spacing.xs,
  },

  clues: {
    ...Typography.body2,
    color: Colors.text.secondary,
  },

  separator: {
    ...Typography.body2,
    color: Colors.text.tertiary,
    marginHorizontal: Spacing.sm,
  },

  time: {
    ...Typography.body2,
    color: Colors.text.secondary,
  },

  description: {
    ...Typography.body2,
    color: Colors.text.tertiary,
  },

  stats: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingTop: Spacing.md,
    borderTopWidth: 1,
    borderTopColor: Colors.divider,
  },

  statItem: {
    flex: 1,
    alignItems: 'center',
  },

  statLabel: {
    ...Typography.caption,
    color: Colors.text.tertiary,
    marginBottom: Spacing.xs,
  },

  statValue: {
    ...Typography.body2,
    color: Colors.text.primary,
    fontWeight: Typography.fontWeight.medium,
  },
});